AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Production-grade high-availability web application with ALB, Auto Scaling,
  CloudWatch monitoring, SSM integration, target-tracking scaling, and comprehensive outputs.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Network Configuration"
        Parameters:
          - VPC
          - Subnets
          - SSHLocation
      - Label:
          default: "EC2 Configuration"
        Parameters:
          - InstanceType
          - KeyName
          - LatestAmiId
      - Label:
          default: "Auto Scaling Configuration"
        Parameters:
          - DesiredCapacity
          - MinSize
          - MaxSize
          - CPUTargetValue
      - Label:
          default: "Notifications"
        Parameters:
          - OperatorEmail
    ParameterLabels:
      VPC:
        default: "Which VPC should this be deployed to?"
      Subnets:
        default: "Which subnets should be used?"

Parameters:
  InstanceType:
    Description: The EC2 instance type
    Type: String
    Default: t3.micro
    AllowedValues:
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - t3a.micro
      - t3a.small
      - t3a.medium
  
  KeyName:
    Description: Name of an existing EC2 key pair (optional - SSM Session Manager is available)
    Type: 'AWS::EC2::KeyPair::KeyName'
  
  LatestAmiId:
    Description: The latest Amazon Linux 2023 AMI (auto-updated)
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64'
  
  OperatorEmail:
    Description: Email address for Auto Scaling and CloudWatch notifications
    Type: String
    AllowedPattern: '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    ConstraintDescription: Must be a valid email address
  
  SSHLocation:
    Description: IP address range allowed for SSH access (CIDR notation)
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid IP CIDR range (e.g., x.x.x.x/x)
  
  Subnets:
    Type: 'List<AWS::EC2::Subnet::Id>'
    Description: Select at least two public subnets in different Availability Zones
  
  VPC:
    Type: 'AWS::EC2::VPC::Id'
    Description: Select the VPC for deployment
  
  DesiredCapacity:
    Description: Initial desired number of instances
    Type: Number
    Default: 2
    MinValue: 1
    MaxValue: 10
  
  MinSize:
    Description: Minimum number of instances in Auto Scaling Group
    Type: Number
    Default: 1
    MinValue: 1
    MaxValue: 10
  
  MaxSize:
    Description: Maximum number of instances in Auto Scaling Group
    Type: Number
    Default: 4
    MinValue: 1
    MaxValue: 10
  
  CPUTargetValue:
    Description: Target CPU utilization percentage for auto scaling
    Type: Number
    Default: 50
    MinValue: 30
    MaxValue: 90
  
  Environment:
    Description: Environment name (for tagging)
    Type: String
    Default: Production
    AllowedValues:
      - Development
      - Staging
      - Production

Resources:
  ### SECURITY GROUPS ###
  ELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${AWS::StackName}-ALB-SG'
      GroupDescription: Security group for Application Load Balancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: Allow HTTP from internet
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: Allow HTTPS from internet (for future SSL)
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-ALB-SG'
        - Key: Environment
          Value: !Ref Environment

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${AWS::StackName}-EC2-SG'
      GroupDescription: Security group for web server instances
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !GetAtt ELBSecurityGroup.GroupId
          Description: Allow HTTP from ALB only
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
          Description: Allow SSH from specified CIDR
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-EC2-SG'
        - Key: Environment
          Value: !Ref Environment

  ### TARGET GROUP & APPLICATION LOAD BALANCER ###
  EC2TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${AWS::StackName}-TG'
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: instance
      HealthCheckEnabled: true
      HealthCheckProtocol: HTTP
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3
      Matcher:
        HttpCode: '200'
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '30'
        - Key: stickiness.enabled
          Value: 'true'
        - Key: stickiness.type
          Value: 'lb_cookie'
        - Key: stickiness.lb_cookie.duration_seconds
          Value: '86400'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-TG'
        - Key: Environment
          Value: !Ref Environment

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub '${AWS::StackName}-ALB'
      Type: application
      Scheme: internet-facing
      IpAddressType: ipv4
      Subnets: !Ref Subnets
      SecurityGroups:
        - !GetAtt ELBSecurityGroup.GroupId
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-ALB'
        - Key: Environment
          Value: !Ref Environment

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref EC2TargetGroup

  ### IAM ROLE & INSTANCE PROFILE ###
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-EC2-Role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Policies:
        - PolicyName: EC2TagsReadOnly
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:DescribeTags'
                  - 'ec2:DescribeInstances'
                Resource: '*'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-EC2-Role'
        - Key: Environment
          Value: !Ref Environment

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub '${AWS::StackName}-EC2-Profile'
      Roles:
        - !Ref InstanceRole

  ### LAUNCH TEMPLATE ###
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub '${AWS::StackName}-LT'
      LaunchTemplateData:
        ImageId: !Ref LatestAmiId
        InstanceType: !Ref InstanceType
        KeyName: !Ref KeyName
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        SecurityGroupIds:
          - !Ref EC2SecurityGroup
        Monitoring:
          Enabled: true
        MetadataOptions:
          HttpTokens: required
          HttpPutResponseHopLimit: 1
          InstanceMetadataTags: enabled
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub '${AWS::StackName}-WebServer'
              - Key: Environment
                Value: !Ref Environment
              - Key: ManagedBy
                Value: CloudFormation
          - ResourceType: volume
            Tags:
              - Key: Name
                Value: !Sub '${AWS::StackName}-Volume'
              - Key: Environment
                Value: !Ref Environment
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            set -e
            
            # Update system
            yum update -y
            
            # Install Apache and CloudWatch agent
            yum install -y httpd amazon-cloudwatch-agent
            
            # Start and enable Apache
            systemctl start httpd
            systemctl enable httpd
            
            # Get instance metadata
            TOKEN=$(curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")
            INSTANCE_ID=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/instance-id)
            AZ=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/placement/availability-zone)
            REGION=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/placement/region)
            
            # Create enhanced index.html
            cat > /var/www/html/index.html << 'EOF'
            <!DOCTYPE html>
            <html lang="en">
            <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>HA Web Application</title>
                <style>
                    body {
                        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                        display: flex;
                        justify-content: center;
                        align-items: center;
                        min-height: 100vh;
                        margin: 0;
                        padding: 20px;
                    }
                    .container {
                        background: white;
                        border-radius: 15px;
                        box-shadow: 0 20px 60px rgba(0,0,0,0.3);
                        padding: 40px;
                        max-width: 600px;
                        text-align: center;
                    }
                    h1 {
                        color: #667eea;
                        margin-bottom: 10px;
                    }
                    .subtitle {
                        color: #666;
                        margin-bottom: 30px;
                    }
                    .info-box {
                        background: #f5f5f5;
                        border-left: 4px solid #667eea;
                        padding: 15px;
                        margin: 20px 0;
                        text-align: left;
                    }
                    .info-box strong {
                        color: #667eea;
                    }
                    .status {
                        display: inline-block;
                        background: #4caf50;
                        color: white;
                        padding: 8px 20px;
                        border-radius: 20px;
                        margin-top: 20px;
                    }
                </style>
            </head>
            <body>
                <div class="container">
                    <h1>🚀 High Availability Web Application</h1>
                    <p class="subtitle">Deployed via AWS CloudFormation</p>
                    
                    <div class="info-box">
                        <strong>Instance ID:</strong> INSTANCE_ID_PLACEHOLDER<br>
                        <strong>Availability Zone:</strong> AZ_PLACEHOLDER<br>
                        <strong>Region:</strong> REGION_PLACEHOLDER<br>
                        <strong>Stack:</strong> ${AWS::StackName}
                    </div>
                    
                    <div class="status">✓ System Healthy</div>
                </div>
            </body>
            </html>
            EOF
            
            # Replace placeholders with actual values
            sed -i "s/INSTANCE_ID_PLACEHOLDER/$INSTANCE_ID/g" /var/www/html/index.html
            sed -i "s/AZ_PLACEHOLDER/$AZ/g" /var/www/html/index.html
            sed -i "s/REGION_PLACEHOLDER/$REGION/g" /var/www/html/index.html
            
            # Create health check endpoint
            echo "OK" > /var/www/html/health.html
            
            # Configure CloudWatch agent
            cat > /opt/aws/amazon-cloudwatch-agent/etc/config.json << 'CWCONFIG'
            {
              "metrics": {
                "namespace": "HA-WebApp",
                "metrics_collected": {
                  "cpu": {
                    "measurement": [{"name": "cpu_usage_idle"}],
                    "totalcpu": false
                  },
                  "disk": {
                    "measurement": [{"name": "used_percent"}],
                    "resources": ["*"]
                  },
                  "mem": {
                    "measurement": [{"name": "mem_used_percent"}]
                  }
                }
              }
            }
            CWCONFIG
            
            # Start CloudWatch agent
            /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl \
              -a fetch-config \
              -m ec2 \
              -s \
              -c file:/opt/aws/amazon-cloudwatch-agent/etc/config.json

  ### SNS TOPIC FOR NOTIFICATIONS ###
  NotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub '${AWS::StackName} Notifications'
      TopicName: !Sub '${AWS::StackName}-Notifications'
      Subscription:
        - Endpoint: !Ref OperatorEmail
          Protocol: email
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-SNS'
        - Key: Environment
          Value: !Ref Environment

  ### AUTO SCALING GROUP ###
  WebServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
      - ApplicationLoadBalancer
      - EC2TargetGroup
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: !Ref MinSize
        MaxBatchSize: 2
        PauseTime: PT5M
        WaitOnResourceSignals: false
        SuspendProcesses:
          - HealthCheck
          - ReplaceUnhealthy
          - AZRebalance
          - AlarmNotification
          - ScheduledActions
    Properties:
      AutoScalingGroupName: !Sub '${AWS::StackName}-ASG'
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: !Ref MinSize
      MaxSize: !Ref MaxSize
      DesiredCapacity: !Ref DesiredCapacity
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      TargetGroupARNs:
        - !Ref EC2TargetGroup
      VPCZoneIdentifier: !Ref Subnets
      MetricsCollection:
        - Granularity: 1Minute
          Metrics:
            - GroupInServiceInstances
            - GroupTotalInstances
      NotificationConfigurations:
        - TopicARN: !Ref NotificationTopic
          NotificationTypes:
            - autoscaling:EC2_INSTANCE_LAUNCH
            - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
            - autoscaling:EC2_INSTANCE_TERMINATE
            - autoscaling:EC2_INSTANCE_TERMINATE_ERROR
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-ASG-Instance'
          PropagateAtLaunch: true
        - Key: Environment
          Value: !Ref Environment
          PropagateAtLaunch: true
        - Key: ManagedBy
          Value: AutoScaling
          PropagateAtLaunch: true

  ### AUTO SCALING POLICIES ###
  CPUScalingPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref WebServerGroup
      PolicyType: TargetTrackingScaling
      EstimatedInstanceWarmup: 180
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: !Ref CPUTargetValue
        DisableScaleIn: false

  RequestCountScalingPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref WebServerGroup
      PolicyType: TargetTrackingScaling
      EstimatedInstanceWarmup: 180
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ALBRequestCountPerTarget
          ResourceLabel: !Join
            - '/'
            - - !GetAtt ApplicationLoadBalancer.LoadBalancerFullName
              - !GetAtt EC2TargetGroup.TargetGroupFullName
        TargetValue: 1000.0
        DisableScaleIn: false

  ### CLOUDWATCH ALARMS ###
  HighCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${AWS::StackName}-HighCPU'
      AlarmDescription: Alert when CPU exceeds 80%
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 80
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref WebServerGroup
      AlarmActions:
        - !Ref NotificationTopic

  UnhealthyHostAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${AWS::StackName}-UnhealthyHosts'
      AlarmDescription: Alert when target group has unhealthy hosts
      MetricName: UnHealthyHostCount
      Namespace: AWS/ApplicationELB
      Statistic: Average
      Period: 60
      EvaluationPeriods: 2
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: LoadBalancer
          Value: !GetAtt ApplicationLoadBalancer.LoadBalancerFullName
        - Name: TargetGroup
          Value: !GetAtt EC2TargetGroup.TargetGroupFullName
      AlarmActions:
        - !Ref NotificationTopic

Outputs:
  ApplicationURL:
    Description: URL to access the web application
    Value: !Sub 'http://${ApplicationLoadBalancer.DNSName}'
    Export:
      Name: !Sub '${AWS::StackName}-URL'

  LoadBalancerDNS:
    Description: DNS name of the Application Load Balancer
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub '${AWS::StackName}-ALB-DNS'

  LoadBalancerArn:
    Description: ARN of the Application Load Balancer
    Value: !Ref ApplicationLoadBalancer
    Export:
      Name: !Sub '${AWS::StackName}-ALB-ARN'

  TargetGroupArn:
    Description: ARN of the Target Group
    Value: !Ref EC2TargetGroup
    Export:
      Name: !Sub '${AWS::StackName}-TG-ARN'

  AutoScalingGroupName:
    Description: Name of the Auto Scaling Group
    Value: !Ref WebServerGroup
    Export:
      Name: !Sub '${AWS::StackName}-ASG-Name'

  LaunchTemplateId:
    Description: ID of the Launch Template
    Value: !Ref LaunchTemplate
    Export:
      Name: !Sub '${AWS::StackName}-LT-ID'

  InstanceProfileArn:
    Description: ARN of the IAM Instance Profile
    Value: !GetAtt InstanceProfile.Arn
    Export:
      Name: !Sub '${AWS::StackName}-Profile-ARN'

  ELBSecurityGroupId:
    Description: Security Group ID for ALB
    Value: !Ref ELBSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-ALB-SG-ID'

  EC2SecurityGroupId:
    Description: Security Group ID for EC2 instances
    Value: !Ref EC2SecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-EC2-SG-ID'

  SNSTopicArn:
    Description: ARN of the SNS notification topic
    Value: !Ref NotificationTopic
    Export:
      Name: !Sub '${AWS::StackName}-SNS-ARN'

  StackName:
    Description: Name of this CloudFormation stack
    Value: !Ref AWS::StackName

  Region:
    Description: AWS Region where the stack is deployed
    Value: !Ref AWS::Region

  DeploymentInfo:
    Description: Quick deployment summary
    Value: !Sub |
      Environment: ${Environment}
      Min Instances: ${MinSize}
      Max Instances: ${MaxSize}
      Desired Instances: ${DesiredCapacity}
      Instance Type: ${InstanceType}
      CPU Target: ${CPUTargetValue}%